<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:f="http://java.sun.com/jsp/jstl/core"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:composite="http://java.sun.com/jsf/composite">
    
	<composite:interface componentType="org.metachart.jsf.Chart">
        <composite:attribute name="jquery" required="false" default="false"
                             shortDescription="If true, jquery lib will be added by MetaChart."/>
		<composite:attribute name="linkDataTableId" required="false"
                             shortDescription="Id of Link table in"/>
		<composite:attribute name="linkBackingBean" required="false" 
                             shortDescription="Id of Link table in"/>
        <composite:attribute name="chartAndTableHandler" required="false" default="chartAndTableHandler"
                             shortDescription="chartAndTableHandler Name String"/>                             
        <composite:attribute name="setJson" required="false"
                             shortDescription="boolean value to enable and disable json as required"/>
        <composite:attribute name="jsonProperty" required="false"
                             shortDescription="Full path of bean property to set json chart"/>
		<composite:attribute name="jsonSaveListener" required="false" method-signature="void listener(javax.faces.event.AjaxBehaviorEvent)"/>
	</composite:interface>
	        
	<composite:implementation>
        <h:outputScript rendered="#{cc.attrs.jquery}" library="jsMetaChart" name="jquery-1.9.1.min.js" target="head" />
        <h:outputScript library="jsMetaChart" name="highchart-8.0.4/code/highcharts.js" target="head" />
        <!-- 
        <div id="buttonrow">
		  <button id="export-png">Export to PNG</button>
		  <button id="export-pdf">Export to PDF</button>
		</div>
		 -->
		<div id="chartContainer" style="height: #{cc.attrs.height}px; margin: 0 auto"></div>
	<h:outputScript>
       
$(function () {
//<![CDATA[
    /**
     * In order to synchronize tooltips and crosshairs, override the
     * built-in events with handlers defined on the parent element.
     */
    $('#chartContainer').bind('mousemove touchmove touchstart', function (e) {
        var chart,
            point,
            i,
            event;

        for (i = 0; i < Highcharts.charts.length; i = i + 1) {
            chart = Highcharts.charts[i];
            event = chart.pointer.normalize(e.originalEvent); // Find coordinates within the chart
            point = chart.series[0].searchPoint(event, true); // Get the hovered point
            if (point) {
                point.highlight(e);
            }
        }
    });
    /**
     * Override the reset function, we don't need to hide the tooltips and crosshairs.
     */
    Highcharts.Pointer.prototype.reset = function () {
        return undefined;
    };

    /**
     * Highlight a point by showing tooltip, setting hover state and draw crosshair
     */
    Highcharts.Point.prototype.highlight = function (event) {
        this.onMouseOver(); // Show the hover marker
        this.series.chart.tooltip.refresh(this); // Show the tooltip
        this.series.chart.xAxis[0].drawCrosshair(event, this); // Show the crosshair
    };

    /**
     * Synchronize zooming through the setExtremes event handler.
     */
    function syncExtremes(e) {
        var thisChart = this.chart;

        if (e.trigger !== 'syncExtremes') { // Prevent feedback loop
            Highcharts.each(Highcharts.charts, function (chart) {
                if (chart !== thisChart) {
                    if (chart.xAxis[0].setExtremes) { // It is null while updating
                        chart.xAxis[0].setExtremes(e.min, e.max, undefined, false, { trigger: 'syncExtremes' });
                    }
                }
            });
        } 
    }
    
    Highcharts.getSVG = function(charts) {
  		var svgArr = [],
    	top = 0,
   	 	width = 0;

	  Highcharts.each(charts, function(chart) {
	    var svg = chart.getSVG(),
	    // Get width/height of SVG for export
	    svgWidth = +svg.match(/^<svg[^>]*width\s*=\s*\"?(\d+)\"?[^>]*>/)[1],
	    svgHeight = +svg.match(/^<svg[^>]*height\s*=\s*\"?(\d+)\"?[^>]*>/)[1];
	
	    svg = svg.replace('<svg','<g transform="translate(0,'+top+')" ');
	    svg = svg.replace('</svg>', '</g>');
	
	    width = Math.max(width, svgWidth);
		top += svgHeight;
		
	    svgArr.push(svg);
  	});	

  	return '<svg height="' + top + '" width="' + width + '" version="1.1" xmlns="http://www.w3.org/2000/svg">' + svgArr.join(' ') + '</svg>';
	};

	/**
	 * Create a global exportCharts method that takes an array of charts as an
	 * argument, and exporting options as the second argument
	 */
	Highcharts.exportCharts = function(charts, options) {
	  // Merge the options
	  options = Highcharts.merge(Highcharts.getOptions().exporting, options);
	
	  // Post to export server
	  Highcharts.post(options.url, {
	    filename: options.filename || 'chart',
	    type: options.type,
	    width: options.width,
	    svg: Highcharts.getSVG(charts)
	  });
	};
	
	Highcharts.setOptions({
                lang: {
                  decimalPoint: '.',
                  thousandsSep: ','
                }
            });
/*          
	$('#export-png').click(function() {
	  Highcharts.exportCharts(Highcharts.charts);
	});
	
	$('#export-pdf').click(function() {
	  Highcharts.exportCharts(Highcharts.charts, {type: 'application/pdf'});
	  }); 
*/
//]]>
  	<composite:insertChildren />
         
});

	</h:outputScript>

	</composite:implementation>
</html>